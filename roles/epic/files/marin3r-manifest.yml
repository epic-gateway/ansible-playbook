apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: marin3r-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: discoveryservicecertificates.operator.marin3r.3scale.net
spec:
  group: operator.marin3r.3scale.net
  names:
    kind: DiscoveryServiceCertificate
    listKind: DiscoveryServiceCertificateList
    plural: discoveryservicecertificates
    singular: discoveryservicecertificate
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.ready
      name: Ready
      type: boolean
    - format: date-time
      jsonPath: .status.notBefore
      name: Not Before
      type: string
    - format: date-time
      jsonPath: .status.notAfter
      name: Not After
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DiscoveryServiceCertificate is an internal resource used to create certificates. This resource is used by the DiscoveryService controller to create the required certificates for the different components. Direct use of DiscoveryServiceCertificate objects is discouraged.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DiscoveryServiceCertificateSpec defines the desired state of DiscoveryServiceCertificate
            properties:
              certificateRenewal:
                description: CertificateRenewalConfig configures the certificate renewal process. If unset default behavior is to renew the certificate but not notify of renewals.
                properties:
                  enabled:
                    description: Enabled is a flag to enable or disable renewal of the certificate
                    type: boolean
                required:
                - enabled
                type: object
              commonName:
                description: CommonName is the CommonName of the certificate
                type: string
              hosts:
                description: Hosts is the list of hosts the certificate is valid for. Only use when 'IsServerCertificate' is true. If unset, the CommonName field will be used to populate the valid hosts of the certificate.
                items:
                  type: string
                type: array
              isCA:
                description: IsCA is a boolean specifying that the certificate is a CA
                type: boolean
              secretRef:
                description: SecretRef is a reference to the secret that will hold the certificate and the private key.
                properties:
                  name:
                    description: Name is unique within a namespace to reference a secret resource.
                    type: string
                  namespace:
                    description: Namespace defines the space within which the secret name must be unique.
                    type: string
                type: object
              server:
                description: IsServerCertificate is a boolean specifying if the certificate should be issued with server auth usage enabled
                type: boolean
              signer:
                description: Signer specifies  the signer to use to create this certificate. Supported signers are CertManager and SelfSigned.
                properties:
                  caSigned:
                    description: CASigned holds specific configuration for the CASigned signer
                    properties:
                      caSecretRef:
                        description: A reference to a Secret containing the CA
                        properties:
                          name:
                            description: Name is unique within a namespace to reference a secret resource.
                            type: string
                          namespace:
                            description: Namespace defines the space within which the secret name must be unique.
                            type: string
                        type: object
                    required:
                    - caSecretRef
                    type: object
                  selfSigned:
                    description: SelfSigned holds specific configuration for the SelfSigned signer
                    type: object
                type: object
              validFor:
                description: ValidFor specifies the validity of the certificate in seconds
                format: int64
                type: integer
            required:
            - commonName
            - secretRef
            - signer
            - validFor
            type: object
          status:
            description: DiscoveryServiceCertificateStatus defines the observed state of DiscoveryServiceCertificate
            properties:
              certificateHash:
                description: CertificateHash stores the current hash of the certificate. It is used for other controllers to validate if a certificate has been re-issued.
                type: string
              conditions:
                description: Conditions represent the latest available observations of an object's state
                items:
                  description: "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API."
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      description: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
                      type: string
                    status:
                      type: string
                    type:
                      description: "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\"."
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              notAfter:
                description: NotAfter is the time at which the certificate expires
                format: date-time
                type: string
              notBefore:
                description: NotBefore is the time at which the certificate starts being valid
                format: date-time
                type: string
              ready:
                description: Ready is a boolean that specifies if the certificate is ready to be used
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: discoveryservices.operator.marin3r.3scale.net
spec:
  group: operator.marin3r.3scale.net
  names:
    kind: DiscoveryService
    listKind: DiscoveryServiceList
    plural: discoveryservices
    singular: discoveryservice
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DiscoveryService represents an envoy discovery service server. Only one instance per namespace is currently supported.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DiscoveryServiceSpec defines the desired state of DiscoveryService
            properties:
              debug:
                description: Debug enables debugging log level for the discovery service controllers. It is safe to use since secret data is never shown in the logs.
                type: boolean
              image:
                description: Image holds the image to use for the discovery service Deployment
                type: string
              metricsPort:
                description: MetricsPort is the port where metrics are served. Defaults to 8383.
                format: int32
                type: integer
              pkiConfg:
                description: PKIConfig has configuration for the PKI that marin3r manages for the different certificates it requires
                properties:
                  rootCertificateAuthority:
                    description: CertificateOptions specifies options to generate the server certificate used both for the xDS server and the mutating webhook server.
                    properties:
                      duration:
                        type: string
                      secretName:
                        type: string
                    required:
                    - duration
                    - secretName
                    type: object
                  serverCertificate:
                    description: CertificateOptions specifies options to generate the server certificate used both for the xDS server and the mutating webhook server.
                    properties:
                      duration:
                        type: string
                      secretName:
                        type: string
                    required:
                    - duration
                    - secretName
                    type: object
                required:
                - rootCertificateAuthority
                - serverCertificate
                type: object
              resources:
                description: Resources holds the Resource Requirements to use for the discovery service Deployment. When not set it defaults to no resource requests nor limits. CPU and Memory resources are supported.
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              serviceConfig:
                description: ServiceConfig configures the way the DiscoveryService endpoints are exposed
                properties:
                  name:
                    type: string
                  type:
                    description: ServiceType is an enum with the available discovery service Service types
                    type: string
                type: object
              xdsServerPort:
                description: XdsServerPort is the port where the xDS server listens. Defaults to 18000.
                format: int32
                type: integer
            type: object
          status:
            description: DiscoveryServiceStatus defines the observed state of DiscoveryService
            properties:
              conditions:
                description: Conditions represent the latest available observations of an object's state
                items:
                  description: "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API."
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      description: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
                      type: string
                    status:
                      type: string
                    type:
                      description: "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\"."
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: envoyconfigrevisions.marin3r.3scale.net
spec:
  group: marin3r.3scale.net
  names:
    kind: EnvoyConfigRevision
    listKind: EnvoyConfigRevisionList
    plural: envoyconfigrevisions
    shortNames:
    - ecr
    singular: envoyconfigrevision
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.nodeID
      name: Node ID
      type: string
    - jsonPath: .spec.envoyAPI
      name: Envoy API
      type: string
    - jsonPath: .spec.version
      name: Version
      type: string
    - jsonPath: .status.published
      name: Published
      type: boolean
    - format: date-time
      jsonPath: .metadata.creationTimestamp
      name: Created At
      type: string
    - format: date-time
      jsonPath: .status.lastPublishedAt
      name: Last Published At
      type: string
    - jsonPath: .status.tainted
      name: Tainted
      type: boolean
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: EnvoyConfigRevision is an internal resource that stores a specific version of an EnvoyConfig resource. EnvoyConfigRevisions are automatically created and deleted by the EnvoyConfig controller and are not intended to be directly used. Use EnvoyConfig objects instead.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: EnvoyConfigRevisionSpec defines the desired state of EnvoyConfigRevision
            properties:
              envoyAPI:
                description: EnvoyAPI is the version of envoy's API to use. Defaults to v3.
                enum:
                - v3
                type: string
              envoyResources:
                description: EnvoyResources holds the different types of resources suported by the envoy discovery service
                properties:
                  clusters:
                    description: 'Clusters is a list of the envoy Cluster resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  endpoints:
                    description: 'Endpoints is a list of the envoy ClusterLoadAssignment resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/endpoint/v3/endpoint.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  listeners:
                    description: 'Listeners is a list of the envoy Listener resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  routes:
                    description: 'Routes is a list of the envoy Route resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  runtimes:
                    description: 'Runtimes is a list of the envoy Runtime resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/runtime/v3/rtds.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  scopedRoutes:
                    description: 'ScopedRoutes is a list of the envoy ScopeRoute resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/scoped_route.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  secrets:
                    description: Secrets is a list of references to Kubernetes Secret objects.
                    items:
                      description: EnvoySecretResource holds a reference to a k8s Secret from where to take a secret from. Only Secrets within the same namespace can be referred.
                      properties:
                        name:
                          description: Name of the envoy resource. If ref is not set, a Secret with this same name will be fetched from within the namespace.
                          type: string
                        ref:
                          description: Ref is a reference to a Kubernetes Secret of type "kubernetes.io/tls". The value of 'ref' cannot point to a different namespace.
                          properties:
                            name:
                              description: Name is unique within a namespace to reference a secret resource.
                              type: string
                            namespace:
                              description: Namespace defines the space within which the secret name must be unique.
                              type: string
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                type: object
              nodeID:
                description: NodeID holds the envoy identifier for the discovery service to know which set of resources to send to each of the envoy clients that connect to it.
                type: string
              serialization:
                description: Serialization specicifies the serialization format used to describe the resources. "json" and "yaml" are supported. "json" is used if unset.
                enum:
                - json
                - b64json
                - yaml
                type: string
              version:
                description: Version is a hash of the EnvoyResources field
                type: string
            required:
            - envoyResources
            - nodeID
            - version
            type: object
          status:
            description: EnvoyConfigRevisionStatus defines the observed state of EnvoyConfigRevision
            properties:
              conditions:
                description: Conditions represent the latest available observations of an object's state
                items:
                  description: "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API."
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      description: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
                      type: string
                    status:
                      type: string
                    type:
                      description: "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\"."
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              lastPublishedAt:
                description: LastPublishedAt indicates the last time this config review transitioned to published
                format: date-time
                type: string
              providesVersions:
                description: ProvidesVersions keeps track of the version that this revision publishes in the xDS server for each resource type
                properties:
                  clusters:
                    type: string
                  endpoints:
                    type: string
                  listeners:
                    type: string
                  routes:
                    type: string
                  runtimes:
                    type: string
                  scopedRoutes:
                    type: string
                  secrets:
                    type: string
                type: object
              published:
                description: Published signals if the EnvoyConfigRevision is the one currently published in the xds server cache
                type: boolean
              tainted:
                description: Tainted indicates whether the EnvoyConfigRevision is eligible for publishing or not
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: envoyconfigs.marin3r.3scale.net
spec:
  group: marin3r.3scale.net
  names:
    kind: EnvoyConfig
    listKind: EnvoyConfigList
    plural: envoyconfigs
    shortNames:
    - ec
    singular: envoyconfig
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.nodeID
      name: Node ID
      type: string
    - jsonPath: .spec.envoyAPI
      name: Envoy API
      type: string
    - jsonPath: .status.desiredVersion
      name: Desired Version
      type: string
    - jsonPath: .status.publishedVersion
      name: Published Version
      type: string
    - jsonPath: .status.cacheState
      name: Cache State
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: EnvoyConfig holds the configuration for a given envoy nodeID. The spec of an EnvoyConfig object holds the Envoy resources that conform the desired configuration for the given nodeID and that the discovery service will send to any envoy client that identifies itself with that nodeID.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: EnvoyConfigSpec defines the desired state of EnvoyConfig
            properties:
              envoyAPI:
                description: EnvoyAPI is the version of envoy's API to use. Defaults to v3.
                enum:
                - v3
                type: string
              envoyResources:
                description: EnvoyResources holds the different types of resources suported by the envoy discovery service
                properties:
                  clusters:
                    description: 'Clusters is a list of the envoy Cluster resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/cluster/v3/cluster.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  endpoints:
                    description: 'Endpoints is a list of the envoy ClusterLoadAssignment resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/endpoint/v3/endpoint.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  listeners:
                    description: 'Listeners is a list of the envoy Listener resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/listener/v3/listener.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  routes:
                    description: 'Routes is a list of the envoy Route resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  runtimes:
                    description: 'Runtimes is a list of the envoy Runtime resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/service/runtime/v3/rtds.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  scopedRoutes:
                    description: 'ScopedRoutes is a list of the envoy ScopeRoute resource type. API V3 reference: https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/scoped_route.proto'
                    items:
                      description: EnvoyResource holds serialized representation of an envoy resource
                      properties:
                        name:
                          description: Name of the envoy resource
                          type: string
                        value:
                          description: Value is the serialized representation of the envoy resource
                          type: string
                      required:
                      - name
                      - value
                      type: object
                    type: array
                  secrets:
                    description: Secrets is a list of references to Kubernetes Secret objects.
                    items:
                      description: EnvoySecretResource holds a reference to a k8s Secret from where to take a secret from. Only Secrets within the same namespace can be referred.
                      properties:
                        name:
                          description: Name of the envoy resource. If ref is not set, a Secret with this same name will be fetched from within the namespace.
                          type: string
                        ref:
                          description: Ref is a reference to a Kubernetes Secret of type "kubernetes.io/tls". The value of 'ref' cannot point to a different namespace.
                          properties:
                            name:
                              description: Name is unique within a namespace to reference a secret resource.
                              type: string
                            namespace:
                              description: Namespace defines the space within which the secret name must be unique.
                              type: string
                          type: object
                      required:
                      - name
                      type: object
                    type: array
                type: object
              nodeID:
                description: NodeID holds the envoy identifier for the discovery service to know which set of resources to send to each of the envoy clients that connect to it.
                type: string
              serialization:
                description: Serialization specicifies the serialization format used to describe the resources. "json" and "yaml" are supported. "json" is used if unset.
                enum:
                - json
                - b64json
                - yaml
                type: string
            required:
            - envoyResources
            - nodeID
            type: object
          status:
            description: EnvoyConfigStatus defines the observed state of EnvoyConfig
            properties:
              cacheState:
                description: CacheState summarizes all the observations about the EnvoyConfig to give the user a concrete idea on the general status of the discovery servie cache. It is intended only for human consumption. Other controllers should relly on conditions to determine the status of the discovery server cache.
                type: string
              conditions:
                description: Conditions represent the latest available observations of an object's state
                items:
                  description: "Condition represents an observation of an object's state. Conditions are an extension mechanism intended to be used when the details of an observation are not a priori known or would not apply to all instances of a given Kind. \n Conditions should be added to explicitly convey properties that users and components care about rather than requiring those properties to be inferred from other observations. Once defined, the meaning of a Condition can not be changed arbitrarily - it becomes part of the API, and has the same backwards- and forwards-compatibility concerns of any other part of the API."
                  properties:
                    lastTransitionTime:
                      format: date-time
                      type: string
                    message:
                      type: string
                    reason:
                      description: ConditionReason is intended to be a one-word, CamelCase representation of the category of cause of the current status. It is intended to be used in concise output, such as one-line kubectl get output, and in summarizing occurrences of causes.
                      type: string
                    status:
                      type: string
                    type:
                      description: "ConditionType is the type of the condition and is typically a CamelCased word or short phrase. \n Condition types should indicate state in the \"abnormal-true\" polarity. For example, if the condition indicates when a policy is invalid, the \"is valid\" case is probably the norm, so the condition should be called \"Invalid\"."
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              desiredVersion:
                description: DesiredVersion represents the resources version described in the spec of the EnvoyConfig object
                type: string
              publishedVersion:
                description: PublishedVersion is the config version currently served by the envoy discovery service for the give nodeID
                type: string
              revisions:
                description: ConfigRevisions is an ordered list of references to EnvoyConfigRevision objects
                items:
                  description: ConfigRevisionRef holds a reference to EnvoyConfigRevision object
                  properties:
                    ref:
                      description: Ref is a reference to the EnvoyConfigRevision object that holds the configuration matching the Version field.
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                    version:
                      description: Version is a hash of the EnvoyResources field
                      type: string
                  required:
                  - ref
                  - version
                  type: object
                type: array
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: envoydeployments.operator.marin3r.3scale.net
spec:
  group: operator.marin3r.3scale.net
  names:
    kind: EnvoyDeployment
    listKind: EnvoyDeploymentList
    plural: envoydeployments
    singular: envoydeployment
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: EnvoyDeployment is a resource to deploy and manage a Kubernetes Deployment of Envoy Pods.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: EnvoyDeploymentSpec defines the desired state of EnvoyDeployment
            properties:
              adminAccessLogPath:
                description: Configures envoy's admin access log path. Defaults to /dev/null.
                type: string
              adminPort:
                description: Configures envoy's admin port. Defaults to 9901.
                format: int32
                type: integer
              affinity:
                description: Affinity configuration for the envoy pods
                properties:
                  nodeAffinity:
                    description: Describes node affinity scheduling rules for the pod.
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                        items:
                          description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                          properties:
                            preference:
                              description: A node selector term, associated with the corresponding weight.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            weight:
                              description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - preference
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                        properties:
                          nodeSelectorTerms:
                            description: Required. A list of node selector terms. The terms are ORed.
                            items:
                              description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                              properties:
                                matchExpressions:
                                  description: A list of node selector requirements by node's labels.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchFields:
                                  description: A list of node selector requirements by node's fields.
                                  items:
                                    description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: The label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                        type: string
                                      values:
                                        description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                              type: object
                            type: array
                        required:
                        - nodeSelectorTerms
                        type: object
                    type: object
                  podAffinity:
                    description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaceSelector:
                                  description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaceSelector:
                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                  podAntiAffinity:
                    description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                    properties:
                      preferredDuringSchedulingIgnoredDuringExecution:
                        description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                        items:
                          description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                          properties:
                            podAffinityTerm:
                              description: Required. A pod affinity term, associated with the corresponding weight.
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources, in this case pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaceSelector:
                                  description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                      items:
                                        description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                        properties:
                                          key:
                                            description: key is the label key that the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                      type: object
                                  type: object
                                namespaces:
                                  description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            weight:
                              description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                              format: int32
                              type: integer
                          required:
                          - podAffinityTerm
                          - weight
                          type: object
                        type: array
                      requiredDuringSchedulingIgnoredDuringExecution:
                        description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                        items:
                          description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                          properties:
                            labelSelector:
                              description: A label query over a set of resources, in this case pods.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaceSelector:
                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces. This field is beta-level and is only honored when PodAffinityNamespaceSelector feature is enabled.
                              properties:
                                matchExpressions:
                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                  items:
                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                    properties:
                                      key:
                                        description: key is the label key that the selector applies to.
                                        type: string
                                      operator:
                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                        type: string
                                      values:
                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                        items:
                                          type: string
                                        type: array
                                    required:
                                    - key
                                    - operator
                                    type: object
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                  type: object
                              type: object
                            namespaces:
                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace"
                              items:
                                type: string
                              type: array
                            topologyKey:
                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                              type: string
                          required:
                          - topologyKey
                          type: object
                        type: array
                    type: object
                type: object
              annotations:
                additionalProperties:
                  type: string
                description: Annotations allows the user to add annotations to the envoy deployment template.
                type: object
              clusterID:
                description: Defines the local service cluster name where Envoy is running. Defaults to the NodeID in the EnvoyConfig if unset
                type: string
              discoveryServiceRef:
                description: DiscoveryServiceRef points to a DiscoveryService in the same namespace
                type: string
              duration:
                description: Defines the duration of the client certificate that is used to authenticate with the DiscoveryService
                type: string
              envVars:
                description: EnvVars allows the user to define environment variables for the Envoy process.
                items:
                  description: EnvVar represents an environment variable present in a Container.
                  properties:
                    name:
                      description: Name of the environment variable. Must be a C_IDENTIFIER.
                      type: string
                    value:
                      description: 'Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".'
                      type: string
                    valueFrom:
                      description: Source for the environment variable's value. Cannot be used if value is not empty.
                      properties:
                        configMapKeyRef:
                          description: Selects a key of a ConfigMap.
                          properties:
                            key:
                              description: The key to select.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the ConfigMap or its key must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                        fieldRef:
                          description: 'Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels[''<KEY>'']`, `metadata.annotations[''<KEY>'']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.'
                          properties:
                            apiVersion:
                              description: Version of the schema the FieldPath is written in terms of, defaults to "v1".
                              type: string
                            fieldPath:
                              description: Path of the field to select in the specified API version.
                              type: string
                          required:
                          - fieldPath
                          type: object
                        resourceFieldRef:
                          description: 'Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.'
                          properties:
                            containerName:
                              description: 'Container name: required for volumes, optional for env vars'
                              type: string
                            divisor:
                              anyOf:
                              - type: integer
                              - type: string
                              description: Specifies the output format of the exposed resources, defaults to "1"
                              pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                              x-kubernetes-int-or-string: true
                            resource:
                              description: 'Required: resource to select'
                              type: string
                          required:
                          - resource
                          type: object
                        secretKeyRef:
                          description: Selects a key of a secret in the pod's namespace
                          properties:
                            key:
                              description: The key of the secret to select from.  Must be a valid secret key.
                              type: string
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                            optional:
                              description: Specify whether the Secret or its key must be defined
                              type: boolean
                          required:
                          - key
                          type: object
                      type: object
                  required:
                  - name
                  type: object
                type: array
              envoyConfigRef:
                description: EnvoyConfigRef points to an EnvoyConfig in the same namespace that holds the envoy resources for this Deployment
                type: string
              extraArgs:
                description: Allows the user to define extra command line arguments for the Envoy process
                items:
                  type: string
                type: array
              extraLabels:
                additionalProperties:
                  type: string
                description: ExtraLabels allows the user to add extra labels to the envoy deployment template.
                type: object
              image:
                description: Image is the envoy image and tag to use
                type: string
              initManager:
                description: InitManager defines configuration for Envoy's init manager, which handles initialization for Envoy pods
                properties:
                  image:
                    description: Image is the init manager image and tag to use
                    type: string
                type: object
              livenessProbe:
                description: Liveness probe for the envoy pods
                properties:
                  failureThreshold:
                    description: Minimum consecutive failures for the probe to be considered failed after having succeeded
                    format: int32
                    type: integer
                  initialDelaySeconds:
                    description: Number of seconds after the container has started before liveness probes are initiated
                    format: int32
                    type: integer
                  periodSeconds:
                    description: How often (in seconds) to perform the probe
                    format: int32
                    type: integer
                  successThreshold:
                    description: Minimum consecutive successes for the probe to be considered successful after having failed
                    format: int32
                    type: integer
                  timeoutSeconds:
                    description: Number of seconds after which the probe times out
                    format: int32
                    type: integer
                required:
                - failureThreshold
                - initialDelaySeconds
                - periodSeconds
                - successThreshold
                - timeoutSeconds
                type: object
              podDisruptionBudget:
                description: Configures PodDisruptionBudget for the envoy Pods
                properties:
                  maxUnavailable:
                    anyOf:
                    - type: integer
                    - type: string
                    description: An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".
                    x-kubernetes-int-or-string: true
                  minAvailable:
                    anyOf:
                    - type: integer
                    - type: string
                    description: An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".
                    x-kubernetes-int-or-string: true
                type: object
              ports:
                description: Ports exposed by the Envoy container
                items:
                  description: ContainerPort defines port for the Marin3r sidecar container
                  properties:
                    name:
                      description: Port name
                      type: string
                    port:
                      description: Port value
                      format: int32
                      type: integer
                    protocol:
                      default: TCP
                      description: Protocol. Defaults to TCP.
                      type: string
                  required:
                  - name
                  - port
                  type: object
                type: array
              readinessProbe:
                description: Readiness probe for the envoy pods
                properties:
                  failureThreshold:
                    description: Minimum consecutive failures for the probe to be considered failed after having succeeded
                    format: int32
                    type: integer
                  initialDelaySeconds:
                    description: Number of seconds after the container has started before liveness probes are initiated
                    format: int32
                    type: integer
                  periodSeconds:
                    description: How often (in seconds) to perform the probe
                    format: int32
                    type: integer
                  successThreshold:
                    description: Minimum consecutive successes for the probe to be considered successful after having failed
                    format: int32
                    type: integer
                  timeoutSeconds:
                    description: Number of seconds after which the probe times out
                    format: int32
                    type: integer
                required:
                - failureThreshold
                - initialDelaySeconds
                - periodSeconds
                - successThreshold
                - timeoutSeconds
                type: object
              replicas:
                description: Replicas configures the number of replicas in the Deployment. One of 'static', 'dynamic' can be set. If both are set, static has precedence.
                properties:
                  dynamic:
                    description: Configure a min and max value for the number of pods to autoscale dynamically.
                    properties:
                      behavior:
                        description: behavior configures the scaling behavior of the target in both Up and Down directions (scaleUp and scaleDown fields respectively). If not set, the default HPAScalingRules for scale up and scale down are used.
                        properties:
                          scaleDown:
                            description: scaleDown is scaling policy for scaling Down. If not set, the default value is to allow to scale down to minReplicas pods, with a 300 second stabilization window (i.e., the highest recommendation for the last 300sec is used).
                            properties:
                              policies:
                                description: policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
                                items:
                                  description: HPAScalingPolicy is a single policy which must hold true for a specified past interval.
                                  properties:
                                    periodSeconds:
                                      description: PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
                                      format: int32
                                      type: integer
                                    type:
                                      description: Type is used to specify the scaling policy.
                                      type: string
                                    value:
                                      description: Value contains the amount of change which is permitted by the policy. It must be greater than zero
                                      format: int32
                                      type: integer
                                  required:
                                  - periodSeconds
                                  - type
                                  - value
                                  type: object
                                type: array
                              selectPolicy:
                                description: selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used.
                                type: string
                              stabilizationWindowSeconds:
                                description: 'StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).'
                                format: int32
                                type: integer
                            type: object
                          scaleUp:
                            description: 'scaleUp is scaling policy for scaling Up. If not set, the default value is the higher of:   * increase no more than 4 pods per 60 seconds   * double the number of pods per 60 seconds No stabilization is used.'
                            properties:
                              policies:
                                description: policies is a list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the HPAScalingRules will be discarded as invalid
                                items:
                                  description: HPAScalingPolicy is a single policy which must hold true for a specified past interval.
                                  properties:
                                    periodSeconds:
                                      description: PeriodSeconds specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
                                      format: int32
                                      type: integer
                                    type:
                                      description: Type is used to specify the scaling policy.
                                      type: string
                                    value:
                                      description: Value contains the amount of change which is permitted by the policy. It must be greater than zero
                                      format: int32
                                      type: integer
                                  required:
                                  - periodSeconds
                                  - type
                                  - value
                                  type: object
                                type: array
                              selectPolicy:
                                description: selectPolicy is used to specify which policy should be used. If not set, the default value MaxPolicySelect is used.
                                type: string
                              stabilizationWindowSeconds:
                                description: 'StabilizationWindowSeconds is the number of seconds for which past recommendations should be considered while scaling up or scaling down. StabilizationWindowSeconds must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).'
                                format: int32
                                type: integer
                            type: object
                        type: object
                      maxReplicas:
                        description: maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
                        format: int32
                        type: integer
                      metrics:
                        description: metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond. If not set, the default metric will be set to 80% average CPU utilization.
                        items:
                          description: MetricSpec specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).
                          properties:
                            containerResource:
                              description: container resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing a single container in each pod of the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source. This is an alpha feature and can be enabled by the HPAContainerMetrics feature flag.
                              properties:
                                container:
                                  description: container is the name of the container in the pods of the scaling target
                                  type: string
                                name:
                                  description: name is the name of the resource in question.
                                  type: string
                                target:
                                  description: target specifies the target value for the given metric
                                  properties:
                                    averageUtilization:
                                      description: averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
                                      format: int32
                                      type: integer
                                    averageValue:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    type:
                                      description: type represents whether the metric type is Utilization, Value, or AverageValue
                                      type: string
                                    value:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: value is the target value of the metric (as a quantity).
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                  required:
                                  - type
                                  type: object
                              required:
                              - container
                              - name
                              - target
                              type: object
                            external:
                              description: external refers to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information coming from components running outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
                              properties:
                                metric:
                                  description: metric identifies the target metric by name and selector
                                  properties:
                                    name:
                                      description: name is the name of the given metric
                                      type: string
                                    selector:
                                      description: selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                  required:
                                  - name
                                  type: object
                                target:
                                  description: target specifies the target value for the given metric
                                  properties:
                                    averageUtilization:
                                      description: averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
                                      format: int32
                                      type: integer
                                    averageValue:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    type:
                                      description: type represents whether the metric type is Utilization, Value, or AverageValue
                                      type: string
                                    value:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: value is the target value of the metric (as a quantity).
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                  required:
                                  - type
                                  type: object
                              required:
                              - metric
                              - target
                              type: object
                            object:
                              description: object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
                              properties:
                                describedObject:
                                  description: CrossVersionObjectReference contains enough information to let you identify the referred resource.
                                  properties:
                                    apiVersion:
                                      description: API version of the referent
                                      type: string
                                    kind:
                                      description: 'Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"'
                                      type: string
                                    name:
                                      description: 'Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names'
                                      type: string
                                  required:
                                  - kind
                                  - name
                                  type: object
                                metric:
                                  description: metric identifies the target metric by name and selector
                                  properties:
                                    name:
                                      description: name is the name of the given metric
                                      type: string
                                    selector:
                                      description: selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                  required:
                                  - name
                                  type: object
                                target:
                                  description: target specifies the target value for the given metric
                                  properties:
                                    averageUtilization:
                                      description: averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
                                      format: int32
                                      type: integer
                                    averageValue:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    type:
                                      description: type represents whether the metric type is Utilization, Value, or AverageValue
                                      type: string
                                    value:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: value is the target value of the metric (as a quantity).
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                  required:
                                  - type
                                  type: object
                              required:
                              - describedObject
                              - metric
                              - target
                              type: object
                            pods:
                              description: pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
                              properties:
                                metric:
                                  description: metric identifies the target metric by name and selector
                                  properties:
                                    name:
                                      description: name is the name of the given metric
                                      type: string
                                    selector:
                                      description: selector is the string-encoded form of a standard kubernetes label selector for the given metric When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the metricName will be used to gather metrics.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                          items:
                                            description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                            properties:
                                              key:
                                                description: key is the label key that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                  required:
                                  - name
                                  type: object
                                target:
                                  description: target specifies the target value for the given metric
                                  properties:
                                    averageUtilization:
                                      description: averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
                                      format: int32
                                      type: integer
                                    averageValue:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    type:
                                      description: type represents whether the metric type is Utilization, Value, or AverageValue
                                      type: string
                                    value:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: value is the target value of the metric (as a quantity).
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                  required:
                                  - type
                                  type: object
                              required:
                              - metric
                              - target
                              type: object
                            resource:
                              description: resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the "pods" source.
                              properties:
                                name:
                                  description: name is the name of the resource in question.
                                  type: string
                                target:
                                  description: target specifies the target value for the given metric
                                  properties:
                                    averageUtilization:
                                      description: averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
                                      format: int32
                                      type: integer
                                    averageValue:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                    type:
                                      description: type represents whether the metric type is Utilization, Value, or AverageValue
                                      type: string
                                    value:
                                      anyOf:
                                      - type: integer
                                      - type: string
                                      description: value is the target value of the metric (as a quantity).
                                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                      x-kubernetes-int-or-string: true
                                  required:
                                  - type
                                  type: object
                              required:
                              - name
                              - target
                              type: object
                            type:
                              description: 'type is the type of metric source.  It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled'
                              type: string
                          required:
                          - type
                          type: object
                        type: array
                      minReplicas:
                        description: minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down.  It defaults to 1 pod.  minReplicas is allowed to be 0 if the alpha feature gate HPAScaleToZero is enabled and at least one Object or External metric is configured.  Scaling is active as long as at least one metric value is available.
                        format: int32
                        type: integer
                    required:
                    - maxReplicas
                    type: object
                  static:
                    description: Configure a static number of replicas. Defaults to 1.
                    format: int32
                    type: integer
                type: object
              resources:
                description: Resources holds the resource requirements to use for the Envoy Deployment. Defaults to no resource requests nor limits.
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              shutdownManager:
                description: ShutdownManager defines configuration for Envoy's shutdown manager, which handles graceful termination of Envoy pods
                properties:
                  drainStrategy:
                    description: The drain strategy for the graceful shutdown. It also affects drain when listeners are modified or removed via LDS.
                    enum:
                    - gradual
                    - immediate
                    type: string
                  drainTime:
                    description: The time in seconds that Envoy will drain connections during shutdown. It also affects drain behaviour when listeners are modified or removed via LDS.
                    format: int64
                    type: integer
                  image:
                    description: Image is the shutdown manager image and tag to use
                    type: string
                  serverPort:
                    description: Configures the sutdown manager's server port. Defaults to 8090.
                    format: int32
                    type: integer
                type: object
            required:
            - discoveryServiceRef
            - envoyConfigRef
            type: object
          status:
            description: EnvoyDeploymentStatus defines the observed state of EnvoyDeployment
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: marin3r-controller-manager
  namespace: marin3r-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: marin3r-leader-election-role
  namespace: marin3r-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: marin3r-manager-role
rules:
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - serviceaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - marin3r.3scale.net
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - marin3r.3scale.net
  resources:
  - envoyconfigrevisions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - marin3r.3scale.net
  resources:
  - envoyconfigrevisions/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - marin3r.3scale.net
  resources:
  - envoyconfigs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - marin3r.3scale.net
  resources:
  - envoyconfigs/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.marin3r.3scale.net
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - operator.marin3r.3scale.net
  resources:
  - discoveryservicecertificates
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.marin3r.3scale.net
  resources:
  - discoveryservicecertificates/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.marin3r.3scale.net
  resources:
  - discoveryservices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - operator.marin3r.3scale.net
  resources:
  - envoydeployments
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.marin3r.3scale.net
  resources:
  - envoydeployments/finalizers
  verbs:
  - update
- apiGroups:
  - operator.marin3r.3scale.net
  resources:
  - envoydeployments/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - rolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: marin3r-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: marin3r-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: marin3r-leader-election-rolebinding
  namespace: marin3r-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: marin3r-leader-election-role
subjects:
- kind: ServiceAccount
  name: marin3r-controller-manager
  namespace: marin3r-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: marin3r-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: marin3r-manager-role
subjects:
- kind: ServiceAccount
  name: marin3r-controller-manager
  namespace: marin3r-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: marin3r-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: marin3r-proxy-role
subjects:
- kind: ServiceAccount
  name: marin3r-controller-manager
  namespace: marin3r-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 9444f1d7.3scale.net
kind: ConfigMap
metadata:
  name: marin3r-manager-config
  namespace: marin3r-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: marin3r-controller-manager-metrics-service
  namespace: marin3r-system
spec:
  ports:
  - name: metrics
    port: 8080
    protocol: TCP
    targetPort: metrics
  selector:
    control-plane: controller-manager
---
apiVersion: v1
kind: Service
metadata:
  name: marin3r-webhook-service
  namespace: marin3r-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: marin3r-controller-manager
  namespace: marin3r-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - operator
        - --leader-elect
        command:
        - /manager
        image: registry.gitlab.com/acnodal/epic/marin3r:v0.10.0-epic3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 300m
            memory: 300Mi
          requests:
            cpu: 50m
            memory: 100Mi
        securityContext:
          allowPrivilegeEscalation: false
      imagePullSecrets:
      - name: gitlab
      securityContext:
        runAsNonRoot: true
      serviceAccountName: marin3r-controller-manager
      terminationGracePeriodSeconds: 10
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-webhook
  name: marin3r-controller-webhook
  namespace: marin3r-system
spec:
  replicas: 2
  selector:
    matchLabels:
      control-plane: controller-webhook
  template:
    metadata:
      labels:
        control-plane: controller-webhook
    spec:
      containers:
      - args:
        - webhook
        - --tls-dir=/tmp/k8s-webhook-server/serving-certs
        - --tls-cert-name=tls.crt
        - --tls-key-name=tls.key
        command:
        - /manager
        env:
        - name: WATCH_NAMESPACE
          value: ""
        image: registry.gitlab.com/acnodal/epic/marin3r:v0.10.0-epic3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: webhook
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 100m
            memory: 100Mi
          requests:
            cpu: 50m
            memory: 30Mi
        securityContext:
          allowPrivilegeEscalation: false
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      imagePullSecrets:
      - name: gitlab
      serviceAccountName: marin3r-controller-manager
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: marin3r-serving-cert
  namespace: marin3r-system
spec:
  dnsNames:
  - marin3r-webhook-service.marin3r-system.svc
  - marin3r-webhook-service.marin3r-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: marin3r-selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: marin3r-selfsigned-issuer
  namespace: marin3r-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: marin3r-system/marin3r-serving-cert
  name: marin3r-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: marin3r-webhook-service
      namespace: marin3r-system
      path: /pod-v1-mutate
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: sidecar-injector.marin3r.3scale.net
  objectSelector:
    matchLabels:
      marin3r.3scale.net/status: enabled
  reinvocationPolicy: Never
  rules:
  - apiGroups:
    - ""
    apiVersions:
    - v1
    operations:
    - CREATE
    resources:
    - pods
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: marin3r-system/marin3r-serving-cert
  name: marin3r-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: marin3r-webhook-service
      namespace: marin3r-system
      path: /validate-marin3r-3scale-net-v1alpha1-envoyconfig
  failurePolicy: Fail
  name: envoyconfig.marin3r.3scale.net
  rules:
  - apiGroups:
    - marin3r.3scale.net
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - envoyconfigs
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: marin3r-webhook-service
      namespace: marin3r-system
      path: /validate-operator-marin3r-3scale-net-v1alpha1-envoydeployment
  failurePolicy: Fail
  name: envoydeployment.operator.marin3r.3scale.net
  rules:
  - apiGroups:
    - operator.marin3r.3scale.net
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - envoydeployments
  sideEffects: None
