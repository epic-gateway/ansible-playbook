---
- name: download resource model artifacts from gitlab
  get_url:
    headers:
      PRIVATE-TOKEN: "{{ gitlab_toby_ansible_ro }}"
    url: "{{ resource_model_artifact }}"
    dest: ./
- name: unzip artifacts
  unarchive:
    src: artifacts.zip
    remote_src: yes
    dest: ./

- name: Create egw namespace, crds, and operator
  # we should be able to run "kubectl apply -k config/default" but the
  # version of kustomize that's build into kubectl is so old that it
  # doesn't work. For example, kubectl doesn't substitute the
  # namespace properly so it creates a "system" namespace, which is
  # wrong.
  #
  # FIXME: use "kubectl -k" when "kubectl -k" works, and don't install
  # kustomize
  shell: "kustomize build config/default | IMG={{ lookup('env', 'EPIC_CM_IMG') | default('registry.gitlab.com/acnodal/egw-resource-model:ci-main', True) }} envsubst | kubectl apply -f -"
  # this play can fail when we're bringing up the system because
  # various components (e.g., cert-manager) are in the process of
  # starting up. Back off for a few seconds to give things a chance to
  # settle down and try again.
  retries: 3
  delay: 30
  register: result
  until: result is not failed



- name: Create sample org/namespace
  command: /opt/acnodal/bin/epicctl create org --uuidoverride egw-sample

- name: create secret for acnodal private registry in egw namespace
  command: kubectl -n egw create secret docker-registry gitlab --docker-server=registry.gitlab.com --docker-username={{gitlab_user}} --docker-password={{gitlab_secret}}
  register: result
  failed_when: result.rc != 0 and "AlreadyExists" not in result.stderr
- name: create secret for acnodal private registry in egw-sample namespace
  command: kubectl -n egw-sample create secret docker-registry gitlab --docker-server=registry.gitlab.com --docker-username={{gitlab_user}} --docker-password={{gitlab_secret}}
  register: result
  failed_when: result.rc != 0 and "AlreadyExists" not in result.stderr

- name: Wait for our stuff to be ready so the samples will load correctly
  # the samples below require that the webhooks be operational but
  # that takes a few seconds so we need to explicitly wait
  command: kubectl wait --for=condition=Ready --timeout=5m --all -n egw pods

- name: Create sample config singleton, with interface override
  shell: cat config/samples/egw_v1_egw.yaml | sed "s/eth0/{{ lookup('env', 'EPIC_PFC_INTF') | default('eth0', True) }}/" | kubectl apply -f -
- name: Create sample serviceprefix and account
  command: kubectl apply -f config/samples/egw_v1_serviceprefix.yaml -f config/samples/egw_v1_account.yaml
- name: Create sample service group (with envoy docker image override)
  shell: cat config/samples/egw_v1_servicegroup.yaml | sed "s~registry.gitlab.com/acnodal/envoy-for-egw:latest~{{ lookup('env', 'EPIC_EP_IMG') | default('registry.gitlab.com/acnodal/envoy-for-egw:latest', True) }}~" | kubectl apply -f -
