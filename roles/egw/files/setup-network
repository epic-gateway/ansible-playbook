#!/usr/bin/python3

import docker
import json
import subprocess
from kubernetes import client, config, watch


def handle_event(event):

    if event['type'] not in ['ADDED', 'MODIFIED']:
        print("Event is not an ADDED/MODIFIED type, ignoring")
        return

    print(event['object'].status)

    if None == event['object'].status.container_statuses:
        print("Event has no container status, cannot proceed")
        return

    if None == event['object'].status.container_statuses[0].container_id:
        print("Container doesn't have an id yet, cannot proceed")
        return

    # start by finding the container id
    containerid = event['object'].status.container_statuses[0].container_id.split('://')[1]
    print("Container ID: ", containerid)

    # use the container id to find the docker pid
    podpid = dclient.containers.get(containerid).attrs['Config']['Labels']['io.kubernetes.sandbox.id']
    print("Pod PID: ", podpid)

    # use the primary pod container to find the "pause" container
    pausepid = int(dclient.containers.get(podpid).attrs['State']['Pid'])
    print("Pause container PID: ", pausepid)

    # find all of the net namespaces
    cp = subprocess.run(['/usr/bin/lsns', '-Jt', 'net'], capture_output=True)
    if cp.returncode != 0:
        print("error running lsns", cp.stderr)
        return
    nss = json.loads(cp.stdout)['namespaces']

    # find the namespace that contains the "pause" container
    for ns in filter(lambda ns: ns['pid'] == pausepid, nss):
        nsid = int(ns['netnsid'])
        print("Netnsid: ", nsid)

        # get veth interface
        d = subprocess.run(["/usr/sbin/ip", "-j", "link", "show"], capture_output=True)
        if d.returncode == 0:
            for dev in json.loads(d.stdout):
                if 'master' in dev and dev['master'] == 'multus0' and 'link_netnsid' in dev and dev['link_netnsid'] == nsid:
                    ifname = dev['ifname']
        print("veth name: ", ifname)

        # setup PFC on that veth
        subprocess.run("/usr/sbin/tc qdisc list dev {0} clsact | grep clsact || /usr/sbin/tc qdisc add dev {0} clsact".format(ifname), shell=True, check=True)
        subprocess.run("/usr/sbin/tc filter show dev {0} ingress | grep pfc_tag_rx_tc || /usr/sbin/tc filter add dev {0} ingress bpf direct-action object-file /opt/acnodal/bin/pfc_tag_rx_tc.o sec .text".format(ifname), shell=True, check=True)
        print(ifname, "configured")


if __name__ == "__main__":
    config.load_kube_config()
    dclient = docker.from_env()

    v1 = client.CoreV1Api()
    w = watch.Watch()
    for event in w.stream(v1.list_pod_for_all_namespaces, label_selector='app=egw,role=proxy'):
        print("Event: %s %s" % (event['type'], event['object'].metadata.name))
        handle_event(event)
